<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EventManagement.Repository</name>
    </assembly>
    <members>
        <member name="T:EventManagement.Repository.AdminUserRepository">
            <summary>
            This class implements all the methods that are defined in <see cref="T:EventManagement.Repository.Interfaces.IAdminUserRepository"/> and extends <see cref="T:EventManagement.Repository.Repo`1"/> class.
            </summary>
        </member>
        <member name="M:EventManagement.Repository.AdminUserRepository.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EventManagement.Repository.AdminUserRepository"/> class.
            </summary>
            <param name="ctx"><see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.</param>
        </member>
        <member name="M:EventManagement.Repository.AdminUserRepository.GetOne(System.Int32)">
            <summary>
            This will retrieve the specific user from the database table.
            </summary>
            <param name="id">User id.</param>
            <returns>Admin user.</returns>
        </member>
        <member name="M:EventManagement.Repository.AdminUserRepository.PasswordCorrect(System.String,System.String)">
            <summary>
            this method checks if the password is correct.
            </summary>
            <param name="name">Username.</param>
            <param name="password">Password.</param>
            <returns>Bool value wether password is correct or not.</returns>
        </member>
        <member name="M:EventManagement.Repository.AdminUserRepository.Search(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EventManagement.Repository.EventRepository">
            <summary>
            This class store the implementation of Interface <see cref="T:EventManagement.Repository.IEventRepository"/> and extends class Repo of type Events.
            </summary>
        </member>
        <member name="M:EventManagement.Repository.EventRepository.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EventManagement.Repository.EventRepository"/> class.
            </summary>
            <param name="ctx">Database context as parameter of super class.</param>
        </member>
        <member name="M:EventManagement.Repository.EventRepository.GetOne(System.Int32)">
            <summary>
            This is overriden method from <see cref="T:EventManagement.Repository.Repo`1"/> class.
            </summary>
            <param name="id">Get the Event Id.</param>
            <returns>Return Event corresponding to particular id.</returns>
        </member>
        <member name="M:EventManagement.Repository.EventRepository.ChangePlace(System.Int32,System.String)">
            <summary>
            This is the implementation of the method from the <see cref="T:EventManagement.Repository.IEventRepository"/>.
            </summary>
            <param name="id">Event Id.</param>
            <param name="newPlace">New Place Name.</param>
            <returns>bool value if event is updated or not.</returns>
        </member>
        <member name="M:EventManagement.Repository.EventRepository.Search(System.String)">
            <summary>
            This is the implementation of the method from <see cref="T:EventManagement.Repository.IEventRepository"/> interface.
            </summary>
            <param name="name">Event Name to be Searched.</param>
            <returns>Return IQueryable List.</returns>
        </member>
        <member name="T:EventManagement.Repository.GuestRepository">
            <summary>
            This class store the implementation of Interface <see cref="T:EventManagement.Repository.IGuestRepository"/> and extends class Repo of type Events.
            </summary>
        </member>
        <member name="M:EventManagement.Repository.GuestRepository.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EventManagement.Repository.GuestRepository"/> class.
            </summary>
            <param name="ctx">Database context as parameter of super class.</param>
        </member>
        <member name="M:EventManagement.Repository.GuestRepository.ChangeName(System.Int32,System.String)">
            <summary>
            This is the implementation of the method from the <see cref="T:EventManagement.Repository.IGuestRepository"/>.
            </summary>
            <param name="id">Guest Id.</param>
            <param name="newName">New Guest Name.</param>
            <returns>bool value if guest is updated or not.</returns>
        </member>
        <member name="M:EventManagement.Repository.GuestRepository.EditGuest(System.Int32,EventManagement.Data.Models.Guest)">
            <summary>
            This is the implementation of the method from the <see cref="T:EventManagement.Repository.IGuestRepository"/>.
            </summary>
            <param name="id">Guest ID.</param>
            <param name="guest">New guest values.</param>
            <returns>boolean value.</returns>
        </member>
        <member name="M:EventManagement.Repository.GuestRepository.GetOne(System.Int32)">
            <summary>
            This is overriden method from <see cref="T:EventManagement.Repository.Repo`1"/> class.
            </summary>
            <param name="id">Get the Guest Id.</param>
            <returns>Return Guest corresponding to particular id.</returns>
        </member>
        <member name="M:EventManagement.Repository.GuestRepository.Search(System.String)">
            <summary>
            This is the implementation of the method from <see cref="T:EventManagement.Repository.IGuestRepository"/> interface.
            </summary>
            <param name="name">Guest Name to be Searched.</param>
            <returns>Return IQueryable List.</returns>
        </member>
        <member name="T:EventManagement.Repository.Interfaces.IAdminUserRepository">
            <summary>
            This inteface inherits IRepository interface.
            This contains the methods which will be implemented in the AdminUserRepository class.
            </summary>
        </member>
        <member name="M:EventManagement.Repository.Interfaces.IAdminUserRepository.Search(System.String)">
            <summary>
            This method will search the user whos logging in.
            </summary>
            <param name="name">username.</param>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:EventManagement.Repository.Interfaces.IAdminUserRepository.PasswordCorrect(System.String,System.String)">
            <summary>
            this method checks if the password is correct.
            </summary>
            <param name="name">Username.</param>
            <param name="password">Password.</param>
            <returns>Bool value wether password is correct or not.</returns>
        </member>
        <member name="T:EventManagement.Repository.IEventRepository">
            <summary>
            This interface store the queries related to Event Table
            It extends IRepository interface.
            </summary>
        </member>
        <member name="M:EventManagement.Repository.IEventRepository.ChangePlace(System.Int32,System.String)">
            <summary>
            This method is used to change the event place for an Event.
            </summary>
            <param name="id">Id of the Event.</param>
            <param name="newPlace">Updated Place Name.</param>
            <returns>bool value if event is updated or not.</returns>
        </member>
        <member name="M:EventManagement.Repository.IEventRepository.Search(System.String)">
            <summary>
            Search method is used to find particular Event from the Database.
            </summary>
            <param name="name">Event Name to be searched.</param>
            <returns>IQueryable list of Events whose name matched with given input.</returns>
        </member>
        <member name="T:EventManagement.Repository.IGuestRepository">
            <summary>
            This interface store the queries related to Guest Table
            It extends IRepository interface.
            </summary>
        </member>
        <member name="M:EventManagement.Repository.IGuestRepository.Search(System.String)">
            <summary>
            Search method is used to find particular Guest from the Database.
            </summary>
            <param name="name">Guest Name to be searched.</param>
            <returns>IQueryable list of Guest whose name matched with given input.</returns>
        </member>
        <member name="M:EventManagement.Repository.IGuestRepository.ChangeName(System.Int32,System.String)">
            <summary>
            This method is used to change the Guest name.
            </summary>
            <param name="id">Id of the Guest.</param>
            <param name="newName">Updated Guest Name.</param>
            <returns>bool value if Guest is updated or not.</returns>
        </member>
        <member name="M:EventManagement.Repository.IGuestRepository.EditGuest(System.Int32,EventManagement.Data.Models.Guest)">
            <summary>
            This method is used to edit the details of the Guest.
            </summary>
            <param name="id">Guest ID.</param>
            <param name="guest">Guest Type.</param>
            <returns>Boolean return value.</returns>
        </member>
        <member name="T:EventManagement.Repository.IRepository`1">
            <summary>
            This is general interface which contains all the generic methods for all Tables of the Database.
            </summary>
            <typeparam name="T">Class Type.</typeparam>
        </member>
        <member name="M:EventManagement.Repository.IRepository`1.GetAll">
            <summary>
            This method will return all the entries present in particular table.
            </summary>
            <returns>IQueryable list.</returns>
        </member>
        <member name="M:EventManagement.Repository.IRepository`1.GetOne(System.Int32)">
            <summary>
            This method will return the entry with specific id from the particular table.
            </summary>
            <param name="id">Data Id which needs to be returned from table.</param>
            <returns>Return entry of Type T.</returns>
        </member>
        <member name="M:EventManagement.Repository.IRepository`1.Insert(`0)">
            <summary>
            This methods will not return anything but will help to insert the data in the table.
            </summary>
            <param name="entity">data model which need to be inserted.</param>
        </member>
        <member name="M:EventManagement.Repository.IRepository`1.Remove(System.Int32)">
            <summary>
            This method will delete the entry with particular Id.
            </summary>
            <param name="id">Entry Id which needs to be deleted.</param>
            <returns>Boolean value whether deletion is successful or not.</returns>
        </member>
        <member name="M:EventManagement.Repository.IRepository`1.Remove(`0)">
            <summary>
            This method will delete the data model from the table.
            </summary>
            <param name="entity">entry which will get deleted.</param>
            <returns>Boolean value whether deletion is successful or not.</returns>
        </member>
        <member name="T:EventManagement.Repository.ITicketRepository">
            <summary>
            This interface stores functions related to Ticket table.
            </summary>
        </member>
        <member name="M:EventManagement.Repository.ITicketRepository.ChangeDiscount(System.Int32,System.Int32)">
            <summary>
            This method is used to update the discount value in the table of specific ticket.
            </summary>
            <param name="id">ID of the ticket.</param>
            <param name="newDiscount">new discount value.</param>
            <returns>bool value if ticket is updated or not.</returns>
        </member>
        <member name="T:EventManagement.Repository.Repo`1">
            <summary>
            This class store the implementation of Interface <see cref="T:EventManagement.Repository.IRepository`1"/>.
            </summary>
            <typeparam name="T">Class Type.</typeparam>
        </member>
        <member name="F:EventManagement.Repository.Repo`1.ctx">
            <summary>
            ctx is protected object of the DbContext.
            </summary>
        </member>
        <member name="M:EventManagement.Repository.Repo`1.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EventManagement.Repository.Repo`1"/> class.
            </summary>
            <param name="ctx">DbContext object.</param>
        </member>
        <member name="M:EventManagement.Repository.Repo`1.GetAll">
            <summary>
            This method return all the entries of type T.
            </summary>
            <returns>IQueryable List.</returns>
        </member>
        <member name="M:EventManagement.Repository.Repo`1.GetOne(System.Int32)">
            <summary>
            This is an abstract method which will be overriden in child classes as needed.
            </summary>
            <param name="id">id of type int.</param>
            <returns>Instance of type T.</returns>
        </member>
        <member name="M:EventManagement.Repository.Repo`1.Insert(`0)">
            <summary>
            This method insert the type T into the specific table.
            </summary>
            <param name="entity">entity of Type T.</param>
        </member>
        <member name="M:EventManagement.Repository.Repo`1.Remove(System.Int32)">
            <summary>
            This method removes the entry with specific Id from the particular table.
            </summary>
            <param name="id">Entry Id of type int.</param>
            <returns>boolean value whether deletion is successful or not.</returns>
        </member>
        <member name="M:EventManagement.Repository.Repo`1.Remove(`0)">
            <summary>
            This method removes the specific model from the particular table.
            </summary>
            <param name="entity">Entity to be removen.</param>
            <returns>boolean value whether deletion is successful or not.</returns>
        </member>
        <member name="T:EventManagement.Repository.TicketRepository">
            <summary>
            This class store the implementation of Interface <see cref="T:EventManagement.Repository.ITicketRepository"/> and extends class Repo of type Events.
            </summary>
        </member>
        <member name="M:EventManagement.Repository.TicketRepository.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EventManagement.Repository.TicketRepository"/> class.
            </summary>
            <param name="ctx">Database context as parameter of super class.</param>
        </member>
        <member name="M:EventManagement.Repository.TicketRepository.ChangeDiscount(System.Int32,System.Int32)">
            <summary>
            This is the implementation of the method from the <see cref="T:EventManagement.Repository.ITicketRepository"/>.
            </summary>
            <param name="id">Ticket Id.</param>
            <param name="newDiscount">New Discount Value.</param>
            <returns>bool value if ticket is updated or not.</returns>
        </member>
        <member name="M:EventManagement.Repository.TicketRepository.GetOne(System.Int32)">
            <summary>
            This is overriden method from <see cref="T:EventManagement.Repository.Repo`1"/> class.
            </summary>
            <param name="id">Get the Ticket Id.</param>
            <returns>Return Event corresponding to particular id.</returns>
        </member>
    </members>
</doc>
